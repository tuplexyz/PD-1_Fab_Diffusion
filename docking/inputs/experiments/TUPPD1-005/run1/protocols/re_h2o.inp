! re_h2o.inp
!    Perform an explitic solvent (water) refinement
!
! ***********************************************************************
! * Copyright 2003-2018 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

@RUN:protocols/initialize.cns(iteration=$iteration;)

@NEWIT:water/iteration.cns(iteration=$iteration;)

@RUN:run.cns(
iteration =$iteration;
filenames =$filenames;
data      =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
toppar    =$toppar;
analysis  =$analysis;
)

evaluate ($log_level=quiet)

if ( $log_level = verbose ) then
   set message=normal echo=on end
else
   set message=off echo=off end
end if

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!The next line will be changed automatically from python: 
evaluate ($count = 1)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!The next line will be changed automatically from python: 
evaluate ($file = "")
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!reads in structure, coordinates and parameter files
@RUN:protocols/read_struc.cns

!set the energy flags:
inline @RUN:protocols/setflags.cns

evaluate ($Data.flags.zres = false)
evaluate ($zhar = 0.0)

evaluate ($Data.flags.elec = true)
flags include elec end

!load the solvent topology files:
topology  @@RUN:toppar/water-allhdg5-4.top end 

if ($Data.noecv eq true) then
  evaluate ($fileseed=$file - ".pdb" + ".seed")
  @@$fileseed(seed=$seed;npart=$npart)
else
  evaluate ($seed = max($iteration,1)*$count*$Saprotocol.iniseed)
end if
set seed $seed end

! read coordinate and copy to reference coordinate set
coor @@$file
coor copy end

{*== check first for failed structures ==*}
evaluate ($failure = false)
evaluate ($filefail= "NEWIT:water/" + $file - "PREVIT:" - ".pdb" + "w.fail")
fileexist $filefail end
evaluate ($failure = $result)

! check for CG molecule
eval($nchain1= 1)
eval($coarse = false)
while ($nchain1 <= $data.ncomponents) loop cloop0
  if ($toppar.cg_$nchain1 = true) then
    eval($coarse = true)
  end if
  eval($nchain1 = $nchain1 + 1)
end loop cloop0

! perform the morphing to all atoms model if needed
if ($coarse eq true) then
  inline @RUN:protocols/read_struc-cg.cns
  inline @RUN:protocols/cg-to-aa.cns

  ! reset non-bonded parameters to all atoms defaults
  parameter
    nbonds
      nbxmod=5 atom cdie shift
      cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=1.0 e14fac=0.4 inhibit 0.25
      wmin=0.5 tolerance  0.5
    end
  end

end if

if ($data.waterdock eq true) then
 inline @RUN:protocols/read_water1.cns
end if

if ($Data.flags.sani eq true) then
   flag incl sani end
   coor select (not known and resn ani) end
   if ($select gt 0) then 
     coor @@RUN:toppar/tensor.pdb

     {* Find CoM of protein and move tensor 100 A away *}
     show ave (x) (name CA or name BB or name C1') 
     evaluate ($xcent=$result)
     show ave (y) (name CA or name BB or name C1') 
     evaluate ($ycent=$result)
     show ave (z) (name CA or name BB or name C1') 
     evaluate ($zcent=$result)
     do (x=x+$xcent+100) (resn ANI)
     do (y=y+$ycent+100) (resn ANI)
     do (z=z+$zcent+100) (resn ANI)

     evaluate ($rantens = true)
   else
     evaluate ($rantens = false)
   end if

   {* Harmonic restraints to keep it far away *}
   do (refx=x) (all)
   do (refy=y) (all)
   do (refz=z) (all)
   do (harmonic=20.0)(resn ANI and name OO)
   do (harmonic=0.0) (resn ANI and name X )
   do (harmonic=0.0) (resn ANI and name Y )
   do (harmonic=0.0) (resn ANI and name Z )
   do (harmonic=0.0) (not (resn ANI))
   restraints harmonic exponent=2 end
   flags include harm end
end if

evaluate ($xanmin = false)
if ($Data.flags.xrdc eq true) then
  evaluate ($xanmin = true)
  flag incl xrdc end
end if
if ($Data.flags.xpcs eq true) then
  evaluate ($xanmin = true)
  flag incl xpcs end
end if
if ($xanmin eq true) then
   coor select (not known and resn xan) end
   if ($select gt 0) then 
     coor @@RUN:toppar/tensor_para.pdb

     {* Find CoM of protein and move tensor 100 A away *}
     show ave (x) (name CA or name BB or name C1') 
     evaluate ($xcent=$result)
     show ave (y) (name CA or name BB or name C1') 
     evaluate ($ycent=$result)
     show ave (z) (name CA or name BB or name C1') 
     evaluate ($zcent=$result)
     do (x=x+$xcent+100) (resn XAN)
     do (y=y+$ycent+100) (resn XAN)
     do (z=z+$zcent+100) (resn XAN)
     evaluate ($rantens_para = true)
   else
     evaluate ($rantens_para = false)
   end if
end if

if ($Data.flags.dani eq true) then
   flag incl dani end
   coor select (not known and resn DAN) end
   if ($select gt 0) then 
     coor @@RUN:toppar/tensor_dani.pdb

     {* Find CoM of protein and move tensor 100 A away *}
     show ave (x) (name CA or name BB or name C1') 
     evaluate ($xcent=$result)
     show ave (y) (name CA or name BB or name C1') 
     evaluate ($ycent=$result)
     show ave (z) (name CA or name BB or name C1') 
     evaluate ($zcent=$result)
     do (x=x+$xcent+100) (resn DAN)
     do (y=y+$ycent+100) (resn DAN)
     do (z=z+$zcent+100) (resn DAN)

     evaluate ($rantens_dani = true)
   else
     evaluate ($rantens_dani = false)
   end if

   {* Harmonic restraints to keep it far away *}
   do (refx=x) (all)
   do (refy=y) (all)
   do (refz=z) (all)
   do (harmonic=20.0)(resn DAN and name OO)
   do (harmonic=0.0) (resn DAN and name X )
   do (harmonic=0.0) (resn DAN and name Y )
   do (harmonic=0.0) (resn DAN and name Z )
   do (harmonic=0.0) (not (resn ANI or resn DAN))
   restraints harmonic exponent=2 end
   flags include harm end
end if

if ($Data.flags.rg eq true ) then
  collapse
    force  $Data.krg_cool3
    target $Data.rgtarg
    sele   (not (resn ANI or resn XAN or resn WAT or resn HOH or resn TIP3))
  end
end if

do (refx = x) (all)
do (refy = y) (all)
do (refz = z) (all)

{*== check if water refinement should be performed ==*}
if ($refine.firstwater eq "yes") then
  if ($refine.solvshell eq true) then
    if ($failure eq false) then
      ! generate water layer
      do (segid = "PROT") (segid "    ")
      @RUN:protocols/generate_water.cns
      do (segid = "    ") (segid "PROT")
    end if
  else
    parameter nbonds eps=$Data.epsilon1 end end
  end if
end if

set seed $seed end
set message=normal echo=on end
inline @RUN:protocols/read_data.cns

! read EM-data
if ($data.flags.em = true) then
    @RUN:protocols/em_read_data.cns(data=$data;)
    if ($data.em.itw = true) then
        flags include xref end
    end if
end if

if ($refine.solvshell eq true) then
  inline @RUN:protocols/water_rest.cns
end if
     
if ($Data.ranair eq true) then
  if ($Data.ncomponents > 2) then
    display ========= Unsupported option ===========
    display Random definition of AIRs with more than
    display two molecules currently unsupported
    display ========================================
    stop
  end if
  evaluate ($Data.noecv = false)
  noe
    reset
    nrestraints = 100000     ! allocate space for NOEs
    ceiling 1000
  end
!  @RUN:protocols/contactairs.cns

  !Read back in hbond data
  if (&data.hbond_lastit ge &iteration) then
      if (&data.hbond_firstit le &iteration) then
        if (&data.hbonds_on eq true) then 
          noe @@RUN:data/hbonds/hbonds.tbl end
        end if
      end if
  end if

  noe
    averaging  * sum
    potential  * soft
    scale      * 1.0
    sqconstant * 1.0
    sqexponent * 2
    soexponent * 1
    rswitch    * 1.0
    sqoffset   * 0.0
    asymptote  * 2.0
    msoexponent * 1
    masymptote  * -0.1
    mrswitch    * 1.0
    avexpo hbond 20
  end
  inline @RUN:protocols/water_rest.cns
end if

{* random removal of restaints ================================== *}
!Make sure that at least as many distance restraints are successfully
!read as the number of partitions for cross-validation
evaluate ($numnoe = 999)
noe ? end
if ($NUMNOE = 0) then
  evaluate ($Data.ncvpart = 1)
  evaluate ($Data.noecv = FALSE)
end if

if ($NUMNOE lt $Data.ncvpart) then
  noe part=1 end
  evaluate ($Data.ncvpart = 1)
  evaluate ($Data.noecv = FALSE)
end if

if ($Data.noecv eq true) then
  set message=on echo=on end
  noe cv $npart ? end
else
  evaluate ($npart = 0)
end if

if ( $log_level = verbose ) then
   set message=normal echo=on end
else
   set message=off echo=off end
end if

if ($Data.flags.sani eq true) then
   flag incl sani end
else
  flag excl sani end
end if

if ($Data.flags.xrdc eq true) then
   flag incl xrdc end
else
   flag excl xrdc end
end if

if ($Data.flags.xpcs eq true) then
   flag incl xpcs end
else
   flag excl xpcs end
end if

if ($Data.flags.dani eq true) then
   flag incl dani end
else
  flag excl dani end
end if

if ($Data.flags.vean eq true) then
   flag incl vean end
else
  flag excl vean end
end if

!set the rdc coefficients:
evaluate ($nrdc=1)
while ($nrdc <= $data.numrdc) loop rdc
  evaluate ($cln = "rd" + encode($nrdc) )
  if ($Data.rdc_choice_$nrdc eq "SANI") then
    sani class $cln coeff 0.0 $Data.rdc_d_$nrdc $Data.rdc_r_$nrdc end
    sani class $cln force $data.rdc_cool3_$nrdc end
  end if
  if ($Data.rdc_choice_$nrdc eq "VANGLE") then
    vean class $cln force $Data.fin_bor_cool3_$nrdc $Data.fin_cen_cool3_$nrdc end
  end if
  if ($Data.rdc_choice_$nrdc eq "XRDC") then
    xrdc class $cln coeff $Data.rdc_d_$nrdc $Data.rdc_r_$nrdc end
    xrdc class $cln force $data.rdc_cool3_$nrdc end
  end if
  evaluate ($nrdc=$nrdc+1)
end loop rdc

!set the pcs coefficients:
evaluate ($npcs=1)
while ($npcs <= $data.numpcs) loop pcs
  evaluate ($cln = "pc" + encode($npcs) )
  if ($Data.pcs_choice_$npcs eq "XPCS") then
    xpcs class $cln coeff $Data.pcs_d_$npcs $Data.pcs_r_$npcs end
    xpcs class $cln force $data.pcs_cool3_$npcs end
  end if
  evaluate ($npcs=$npcs+1)
end loop pcs

! set dani coefficients:
evaluate ($ndani=1)
while ($ndani <= $data.numdani) loop dani
  evaluate ($cln = "da" + encode($ndani) )
  if ($Data.dan_choice_$ndani eq "DANI") then
    dani class $cln coeff $Data.dan_tc_$ndani $Data.dan_anis_$ndani $Data.dan_r_$ndani $Data.dan_wh_$ndani $Data.dan_wn_$ndani end
    dani class $cln force $data.dan_cool3_$ndani end
  end if
  evaluate ($ndani=$ndani+1)
end loop dani


@RUN:protocols/symmultimer.cns
 
if ($Data.scaling eq true) then 
  inline @RUN:protocols/set_noe_scale.cns
end if
igroup
  interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN)) weight * 1 end
  interaction (resn ANI or resn DAN or resn XAN)
              (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
end

noe 
    rswitch ambi $Data.Rswi_cool3 
    rswitch dist $Data.Rswi_cool3
    rswitch hbon $Data.Rswi_cool3

    mrswitch ambi $Data.mRswi_cool3 
    mrswitch dist $Data.mRswi_cool3
    mrswitch hbon $Data.mRswi_cool3

    asym ambi $Data.asy_cool3
    asym dist $Data.asy_cool3
    asym hbon $Data.asy_cool3

    masym ambi $Data.masy_cool3 
    masym dist $Data.masy_cool3
    masym hbon $Data.masy_cool3

    scale ambi $Data.amb_cool3 
    scale dist $Data.unamb_cool3
    scale hbon $Data.hbond_cool3
end

restraints dihedral 
    scale=$Data.dihedrals_cool3
end 

if ($Data.dnarest eq true) then
  eval ($filednarest = "RUN:data/sequence/dna-rna_restraints.def" )
  fileexist $filednarest end
  if ($result eq true) then
    @RUN:data/sequence/dna-rna_restraints.def
  end if
end if

if ($Data.flags.sani eq true) then
  if ($rantens eq true) then
    @RUN:protocols/mini_tensor.cns
  end if
end if

evaluate ($xanmin = false)
if ($Data.flags.xrdc eq true) then
  evaluate ($xanmin = true)
end if
if ($Data.flags.xpcs eq true) then
  evaluate ($xanmin = true)
end if
if ($xanmin eq true) then
!  if ($rantens_para eq true) then
    @RUN:protocols/mini_tensor_para.cns
!  end if
end if

if ($Data.flags.dani eq true) then
  if ($rantens_dani eq true) then
    @RUN:protocols/mini_tensor_dani.cns
  end if
end if

if ($Data.ssdihed eq all ) then
  inline @RUN:protocols/protein-ss-restraints-all.def
  flag incl cdih end
end if
if ($Data.ssdihed eq alpha ) then
  inline @RUN:protocols/protein-ss-restraints-alpha.def
  flag incl cdih end
end if
if ($Data.ssdihed eq alphabeta ) then
  inline @RUN:protocols/protein-ss-restraints-alpha-beta.def
  flag incl cdih end
end if

energy end

{*== check if water refinement should be performed ==*}
if ($refine.firstwater eq "yes") then

! since we do not use SHAKe, increase the water bond angle energy constant
parameter
  bond  (resn WAT ) (resn WAT ) 1000 TOKEN
  angle (resn WAT ) (resn WAT ) (resn WAT ) 500 TOKEN
  bond  (resn HOH ) (resn HOH ) 1000 TOKEN
  angle (resn HOH ) (resn HOH ) (resn HOH ) 500 TOKEN
  bond  (resn TIP*) (resn TIP*) 1000 TOKEN
  angle (resn TIP*) (resn TIP*) (resn TIP*) 500 TOKEN
end

! fix the protein for initial minimization
fix sele = (not (resn WAT or resn HOH or resn TIP*)) end

! fix rigid molecules including their waters if present
evaluate($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
  evaluate($nchain1 = $nchain1 + 1)
  evaluate($fcounter=0)
  if ($Toppar.nseg_$nchain1 = 0) then
     display NO FLEXIBLE SIDE-CHAINS SEGMENTS for molecule $nchain1
     display FIXING IT
     fix sele = (segid $Toppar.prot_segid_$nchain1 and not name H*) end
  end if
end loop nloop1

! fix the shape
fix sele = (resn SHA) end

minimize powell nstep=40 drop=100 end

! release protein and restrain harmonically
fix sele = (not all) end

! fix the shape
fix sele = (resn SHA) end

! fix rigid molecules 
evaluate($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
  evaluate($nchain1 = $nchain1 + 1)
  evaluate($fcounter=0)
  if ($Toppar.nseg_$nchain1 = 0) then
     display NO FLEXIBLE SIDE-CHAINS SEGMENTS for molecule $nchain1
     display FIXING IT
     fix sele = (segid $Toppar.prot_segid_$nchain1 and not name H*) end
  end if
end loop nloop1

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)
restraints harmonic 
   exponent = 2
end
do (harm = 0)  (all)
do (harm = 5) (not name h* and not (resn WAT or resn HOH or resn TIP*))
do (harmonic=20.0)(resn ANI and name OO)
do (harmonic=0.0) (resn ANI and name X )
do (harmonic=0.0) (resn ANI and name Y )
do (harmonic=0.0) (resn ANI and name Z )
do (harmonic=20.0)(resn DAN and name OO)
do (harmonic=0.0) (resn DAN and name X )
do (harmonic=0.0) (resn DAN and name Y )
do (harmonic=0.0) (resn DAN and name Z )

igroup
  interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN)) weight * 1 end
  interaction (resn ANI or resn DAN or resn XAN)
              (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
end

! check for the presence of ions and add restraints
set message=normal echo=on end

@RUN:protocols/restrain-ions.cns

if ( $log_level = verbose ) then
  set message=normal echo=on end
else
  set message=off echo=off end
end if

minimize powell nstep=40 drop=10 end
minimize powell nstep=40 drop=10 end

!define flexible segments:
@RUN:protocols/flex_segment_side.cns

do (mass =$Saprotocol.mass) (all)
do (mass=1000) (resn ANI or resn DAN or resn XAN)
do (fbeta = 0) (all)
do (fbeta = $Saprotocol.fbeta {1/ps} ) ( all )                

if ($failure eq false) then

if ($refine.solvshell eq true) then

  ! heat to 300 K
  for $bath in (100 200 300) loop heat
     do (harm = 0)  (all)
     do (harm = 5)  (not name h* and not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP3))
     eval ($nchain1 = 0)
     while ($nchain1 < $data.ncomponents) loop nloop1
      eval ($nchain1=$nchain1+1)
      do (harm = 0)  (attribute store5 = $nchain1 and 
                      not ( name CA or name BB or name C or name N or name P or name C# or name C## ))
     end loop nloop1
     do (vx=maxwell($bath)) (all)
     do (vy=maxwell($bath)) (all)
     do (vz=maxwell($bath)) (all)  
     if ($Data.scaling eq true) then 
       inline @RUN:protocols/set_noe_scale.cns
     end if

     noe
       scale ambi $Data.amb_cool3 
       scale dist $Data.unamb_cool3
     end
     igroup
       interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN)) weight * 1 end
       interaction (resn ANI or resn DAN or resn XAN)
                   (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
     end

     dynamics cartesian
        nstep=$refine.heatsteps timest=0.002{ps}       
        temperature=$bath  tcoupling = true
        nprint=50 
     end 
  end loop heat

  !define flexible segments:
  @RUN:protocols/flex_segment_back.cns

  do (harm = 0)  (all)
  do (harm = 1)  (not name h* and not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP3))
  eval ($nchain1 = 0)
  while ($nchain1 < $data.ncomponents) loop nloop1
    eval ($nchain1=$nchain1+1)
    do (harm = 0)  (attribute store5 = $nchain1) 
  end loop nloop1
  do (harm = 20) (resn ANI and name OO)
  do (harm = 20) (resn DAN and name OO)

  if ($Data.scaling eq true) then 
    inline @RUN:protocols/set_noe_scale.cns
  end if

  noe
    scale ambi $Data.amb_cool3 
    scale dist $Data.unamb_cool3
  end
  igroup
    interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN)) weight * 1 end
    interaction (resn ANI or resn DAN or resn XAN)
                (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
  end

  dynamics cartesian
     nstep=$refine.steps timest=0.002{ps}      
     temperature=$bath  tcoupling = true
     nprint=50 
  end 

  do (mass = $Saprotocol.mass) (all)
  do (harm = 0)  (all)
  do (harm = 1)  (name CA or name BB or name C or name N or name P or name C# or name C##)
  do (harm = 20) (resn ANI and name OO)
  do (harm = 20) (resn DAN and name OO)
  eval ($nchain1 = 0)
  while ($nchain1 < $data.ncomponents) loop nloop1
    eval ($nchain1=$nchain1+1)
    do (harm = 0)  (attribute store5 = $nchain1) 
  end loop nloop1

  ! cool 
  for $bath in (300 200 100) loop cool

     if ($Data.scaling eq true) then 
       inline @RUN:protocols/set_noe_scale.cns
     end if

     noe
       scale ambi $Data.amb_cool3 
       scale dist $Data.unamb_cool3
     end
     igroup
       interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN)) weight * 1 end
       interaction (resn ANI or resn DAN or resn XAN)
                   (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
     end
     dynamics cartesian
        nstep=$refine.coolsteps timest=0.002{ps}      
        temperature=$bath  tcoupling = true                       
        nprint=50 
     end 
  end loop cool

end if

end if

if ($Data.scaling eq true) then 
  inline @RUN:protocols/set_noe_scale.cns
end if

noe
  scale ambi $Data.amb_cool3 
  scale dist $Data.unamb_cool3
end
igroup
  interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN)) weight * 1 end
  interaction (resn ANI or resn DAN or resn XAN)
              (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end
end

flag excl harm end

if ($Data.flags.cdih eq true) then
  flag incl cdih end
end if

mini powell nstep 200 end

{*== End if statement to turn on or off water refinement ==*}
end if 

{* ======================= calculate free molecules internal energy *}

parameter nbonds eps=1.0 end end

igroup
   interaction (not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP*)) 
               (not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP*)) weight * 1 end
end

fix sele=(resn ANI or resn DAN or resn XAN or resn WAT or resn HOH or resn TIP* or resn DMS or resn SHA) end

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

flag excl noe dani sani vean xrdc xpcs coll cdih zhar end
flag include bond angle dihe impr vdw elec end

evaluate ($elec = 0.0)
evaluate ($eintfree = 0.0)
inline @RUN:protocols/calc_free-ene.cns

fix sele=(not all) end

! fix the shape
fix sele = (resn SHA) end

do (x = refx) (all)
do (y = refy) (all)
do (z = refz) (all)

{* ======================= final analysis *}

igroup
   interaction (not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP*)) 
               (not resn ANI and not resn DAN and not resn XAN and not (resn WAT or resn HOH or resn TIP*)) weight * 1 end
end

evaluate ($esolcplx = 0.0)
evaluate ($edesolv = 0.0)

{* ===================== calculate complex internal energy *}
evaluate ($kinter = 1.0)
@RUN:protocols/scale_intra_only.cns
energy end
evaluate ($eintcplx = $bond + $angl + $impr + $dihe + $vdw + $elec)
if ($data.ncomponents = 1) then
  evaluate ($eintfree = $eintcplx)
end if

{* ===================== calculate final energies and write structure *}
evaluate ($nshape = 0)
evaluate ($ncount = 0)
while ($ncount < $data.ncomponents) loop shape
  evaluate ($ncount = $ncount + 1)
  if ($Toppar.shape_$ncount eq true) then
    evaluate ($nshape = $nshape + 1)
  end if
end loop shape

evaluate ($nonshape = $Data.ncomponents - $nshape)
  
if ($nonshape > 1) then
  evaluate ($kinter = 1.0)
  @RUN:protocols/scale_inter_final.cns
else
  @RUN:protocols/scale_intra_only.cns
end if


evaluate ($cdih=0.0)
flag incl noe cdih end
if ($Data.flags.sani eq true) then
  flag incl sani end
end if
if ($Data.flags.xrdc eq true) then
  flag incl xrdc end
end if
if ($Data.flags.xpcs eq true) then
  flag incl xpcs end
end if
if ($Data.flags.dani eq true) then
  flag incl dani end
end if
if ($Data.flags.vean eq true) then
   flag incl vean end
end if

noe 
  scale dist $Data.unamb_cool3 
  scale ambi $Data.amb_cool3
  scale hbon 0.0
  scale symm 0.0
  scale cont 0.0
end
energy end
evaluate ($eair= $noe)
evaluate ($rms_test_noe=0.0)
evaluate ($violations_test_noe=0)
evaluate ($esym = 0.0)
evaluate ($ncs = 0.0)
evaluate ($zhar = 0.0)
if ($Data.flags.sym  eq true) then
  noe reset nres= 2000000 end
  @RUN:protocols/symmultimer.cns
  noe
    scale symm $Data.ksym
  end
  energy end
  evaluate ($esym = $noe)
  if ($Data.noecv eq true) then
    evaluate ($violations_test_noe=0)
    evaluate ($rms_test_noe=0.0)
    display Print out of cross-validated violations and rms not
    display possible in combination with symmetry restraints
    display CV values set therefore to 0
  end if
  noe reset nres= 2000000 end
  set message=normal echo=on end
  !read all the experimental Data:
  @@RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count)
  if ( $log_level = verbose ) then
    set message=normal echo=on end
  else
    set message=off echo=off end
  end if
else
  print threshold=0.3 noe
  evaluate ($rms_noe=$result)
  evaluate ($violations_noe=$violations)
  if ($Data.noecv eq true) then
    evaluate ($rms_test_noe=$test_rms)
    evaluate ($violations_test_noe=$test_violations)
  else
    evaluate ($rms_test_noe=0.0)
    evaluate ($violations_test_noe=0)
  end if
end if

if ($Data.dnarest eq true) then
  @RUN:data/sequence/dna-rna_restraints.def
end if

energy end
evaluate ($etot = $ener - $noe)
evaluate ($noe = $eair)
evaluate ($etot = $etot + $noe)
if ($data.flags.em = true) then
    @RUN:protocols/em_calc_lcc.cns(toppar=$toppar; data=$data;
            saprotocol=$saprotocol; lcc=$lcc;)
    flags exclude xref end
end if

if ($refine.keepwater eq true) then
  evaluate ($filename= "NEWIT:water/" + $file - "PREVIT:" - ".pdb" + "_h2o-all.pdb")
  write coordinates format=pdbo sele= (all) output =$filename end
end if

evaluate ($Data.flags.dihed = false) 
evaluate ($filename= "NEWIT:water/" + $file - "PREVIT:" - ".pdb" + "w.pdb0")
@RUN:protocols/print_coorheader.cns

do (q=1) (all)
write coordinates format=pdbo sele= (not (resn WAT or resn HOH or resn TIP*)) output =$filename end

if ($refine.keepwater eq true) then
  evaluate ($filename= "NEWIT:water/" + $file - "PREVIT:" - ".pdb" + "_h2o-inter.pdb")
  write coordinates format=pdbo sele= (all) output =$filename end
end if

stop

