! read_data.cns
!    Read the various restraints data
!
! ***********************************************************************
! * Copyright 2003-2018 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

!module(Iteration; Data; count;)

!NOEs, hbonds
noe
  reset
  nrestraints = 12000000     ! allocate space for NOEs  
  ceiling 1000
end

if ($Data.amb_lastit ge $Iteration) then
  if ($Data.amb_firstit le $Iteration)   then
     evaluate ($filenam0 = "NEWIT:ambig.tbl_" + encode($count)) 
     fileexist $filenam0 end
     if ($result eq false) then
       evaluate ($filenam0 = "NEWIT:ambig.tbl")
     end if
     noe class ambi @@$filenam0 end 
     if ($Data.noecv eq true) then
       noe part $Data.ncvpart end
     end if
  end if
end if

if ($Data.unamb_lastit ge $Iteration) then 
  if ($Data.unamb_firstit le $Iteration) then 
     noe class dist @@NEWIT:unambig.tbl end 
  end if
end if

if ($Data.hbond_lastit ge $Iteration) then
  if ($Data.hbond_firstit le $Iteration) then
    if ($Data.hbonds_on eq true) then 
      noe @@RUN:data/hbonds/hbonds.tbl end
    end if
  end if
end if

noe
  averaging  * sum
  potential  * soft
  scale      * 1.0                           
  sqconstant * 1.0
  sqexponent * 2
  soexponent * 1
  rswitch    * 1.0
  sqoffset   * 0.0
  asymptote  * 2.0
  msoexponent * 1
  masymptote  * -0.1
  mrswitch    * 1.0
  avexpo hbond 20
end


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!dihedral restraints:
restraints dihedral 
   reset
   nassign 10000 
end
if ($Data.cdih.on eq true) then
  restraints dihedral
    @@RUN:data/dihedrals/dihedrals.tbl
  end
end if

restraints dihedral ? end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!residual dipolar couplings:

evaluate ($Data.flags.sani = false)
evaluate ($Data.flags.xrdc = false)
evaluate ($Data.flags.xpcs = false)
evaluate ($Data.flags.dani = false)
evaluate ($Data.flags.vean = false)
evaluate ($inisani=0)
evaluate ($inixrdc=0)
evaluate ($inixpcs=0)
evaluate ($inidani=0)
evaluate ($inivean = 0)

sani reset nres=5000 end
vean reset nres=10000 end
xrdc reset nres=5000 end
evaluate ($nrdc=1)
while ($nrdc <= $Data.numrdc) loop rdc
  evaluate ($cln="rd"+encode($nrdc))
  if ($Data.rdc_lastit_$nrdc ge $Iteration) then 
    if ($Data.rdc_firstit_$nrdc le $Iteration) then 
      if ($Data.rdc_choice_$nrdc eq "SANI") then
        evaluate ($Data.flags.sani = true)
	evaluate ($restfile="RUN:data/rdcs/rdc"+encode($nrdc)+".tbl")
        evaluate ($inisani=1)
        sani
          class $cln 
          force 0.0
          potential square
          @@$restfile
        end
      end if
      if ($Data.rdc_choice_$nrdc eq "XRDC") then
        evaluate ($Data.flags.xrdc = true)
	evaluate ($restfile="RUN:data/rdcs/rdc"+encode($nrdc)+".tbl")
        evaluate ($inixrdc=1)
        xrdc
          class $cln
          force 0.0
          @@$restfile
        end
      end if
      if ($Data.rdc_choice_$nrdc eq "VANGLE") then
        evaluate ($Data.flags.vean = true)
	evaluate ($restfile="RUN:data/rdcs/rdc"+encode($nrdc)+".tbl")
        evaluate ($inivean = 1)
        if ($Data.rdc_firstIt_$nrdc le $Iteration) then
          vean
            class $cln
            force 0.0 0.0
            @@$restfile
          end
        end if
      end if
    end if
  end if
  evaluate ($nrdc = $nrdc + 1)
end loop rdc

evaluate ($tensread = false)
if ($Data.flags.xrdc = true) then
  noe 
    class tens
    @@RUN:data/tensor/tensor.tbl
    potential tens square
    scale     tens 500.0
  end
  evaluate ($tensread = true)
end if

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!PCS restraints:
xpcs reset nres=5000 end
evaluate ($npcs=1)
while ($npcs <= $Data.numpcs) loop pcs
  if ($Data.pcs_lastit_$npcs ge $Iteration) then 
    if ($Data.pcs_firstit_$npcs le $Iteration) then 
      if ($Data.pcs_choice_$npcs eq "XPCS") then
        evaluate ($Data.flags.xpcs = true)
	evaluate ($restfile="RUN:data/pcs/pcs"+encode($npcs)+".tbl")
	evaluate ($cln="pc"+encode($npcs))
        evaluate ($inixpcs=1)
        xpcs
          class $cln
          force 0.0
          @@$restfile
        end
      end if
    end if
  end if
  evaluate ($npcs= $npcs + 1)
end loop pcs

if ($Data.flags.xpcs = true) then
  if ($tensread eq FALSE) then
    noe 
      class tens
      @@RUN:data/tensor/tensor.tbl
      potential tens square
      scale     tens 500.0
    end
  end if
end if

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!DANI restraints:

evaluate ($ndani=1)
dani reset nres=5000 end
while ($ndani <= $Data.numdani) loop dani
  if ($Data.dan_lastit_$ndani ge $Iteration) then 
    if ($Data.dan_firstit_$ndani le $Iteration) then 
      if ($Data.dan_choice_$ndani eq "DANI") then
        evaluate ($Data.flags.dani = true)
	evaluate ($restfile="RUN:data/dani/dani"+encode($ndani)+".tbl")
	evaluate ($cln="da"+encode($ndani))
        evaluate ($inidani=1)
        dani
          class $cln
          force 0.0
          potential square
          @@$restfile
        end
      end if
    end if
  end if
  evaluate ($ndani = $ndani + 1)
end loop dani
