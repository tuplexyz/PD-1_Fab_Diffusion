proc cross(in1; in2; out;)
    {Calculate the cross-product of two vectors}
    eval(&out.x = &in1.y * &in2.z - &in1.z * &in2.y)
    eval(&out.y = &in1.z * &in2.x - &in1.x * &in2.z)
    eval(&out.z = &in1.x * &in2.y - &in1.y * &in2.x)
endp

proc get_angle(in1; in2; angle;)
    {Calculate the angle in degree between two vectors}
    call inner(in1=&in1; in2=&in2; out=$tmp)
    call norm(vec=&in1; norm=$norm1;)
    call norm(vec=&in2; norm=$norm2;)
    eval(&angle = acos($tmp / ($norm1 * $norm2)))
endp

proc inner(in1; in2; out;)
    {In-product of two vectors}
    eval(&out = &in1.x * &in2.x + &in1.y * &in2.y + &in1.z * &in2.z)
endp

proc norm(vec; norm;)
    {Calculates the norm of a vector}
    eval(&norm = sqrt(&vec.x**2 + &vec.y**2 + &vec.z**2))
endp

! get center of map coordinates
show average(x) (name MAP)
eval($map_ave.x = $RESULT)
show average(y) (name MAP)
eval($map_ave.y = $RESULT)
show average(z) (name MAP)
eval($map_ave.z = $RESULT)

! determine whether the molecules should be placed in the same plane of the
! centroids for symmetric systems
eval($place_molecules_in_plane = false)
if ($data.ncomponents > 2) then
    if ($data.flags.sym = true) then
        eval($place_molecules_in_plane = true)
    end if
end if

! in case of c-symmetry get axis of symmetry from map-coordinates
if ($place_molecules_in_plane = true) then

    ! axis of symmetry is orthogonal to the symmetry plane 
    ! get two vectors representing the symmetry plane
    eval($pq.x = $Data.centroids.xcom_1 - $map_ave.x)
    eval($pq.y = $data.centroids.ycom_1 - $map_ave.y)
    eval($pq.z = $data.centroids.zcom_1 - $map_ave.z)
    eval($pr.x = $data.centroids.xcom_2 - $map_ave.x)
    eval($pr.y = $data.centroids.ycom_2 - $map_ave.y)
    eval($pr.z = $data.centroids.zcom_2 - $map_ave.z)

    ! the axis of symmetry is orthogonal to the symmetry plane and 
    ! is the cross-product of those two vectors
    call cross(in1=$pq; in2=$pr; out=$sym_axis;)

    ! get angle between the axis of symmetry and current symmetry z-axis 
    eval($z_axis.x = 0)
    eval($z_axis.y = 0)
    eval($z_axis.z = 1)
    call get_angle(in1=$sym_axis; in2=$z_axis; angle=$angle)

    ! rotate the current system around the axis orthogonal to the 
    ! current axis of symmetry and future axis of symmetry
    ! first get an orthogonal vector to the axis of symmetry
    call cross(in1=$z_axis; in2=$sym_axis; out=$rot_axis;)

    ! do the rotation around the origin
    eval($nchain1 = 0)
    while ($nchain1 < $Data.ncomponents) loop nloop1
        eval($nchain1 = $nchain1 + 1)
        coor rotate 
            selection=((segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) and not name MAP)
            axis ($rot_axis.x $rot_axis.y $rot_axis.z) $angle
        end
    end loop nloop1

    ! perform an extra random rotation around the symmetry axis for better
    ! unbiases sampling for volume data
    eval($nchain1 = 0)
    eval($angle = 360.0 * random())
    while ($nchain1 < $Data.ncomponents) loop nloop1
        eval($nchain1 = $nchain1 + 1)
        coor rotate 
            selection=((segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) and not name MAP)
            axis ($sym_axis.x $sym_axis.y $sym_axis.z) $angle
        end
    end loop nloop1
else
    ! random rotation of the whole system around origin to reduce bias 
    ! for volume data fitting
    @RUN:protocols/get_random_rotation.cns(Rotation=$rr;)
    eval($nchain1 = 0)
    while ($nchain1 < $Data.ncomponents) loop nloop1
        eval($nchain1 = $nchain1 + 1)
        coor rotate 
            selection=((segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) and not name MAP)
            quaternion $rr.q0 $rr.q1 $rr.q2 $rr.q3
        end
    end loop nloop1
end if ! $place_molecules_in_plane = true

! translate subunits so that the map-center is the origin
eval($nchain1 = 0)
while ($nchain1 < $Data.ncomponents) loop nloop1
    eval($nchain1 = $nchain1 + 1)

    coor translate 
        selection=((segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) and not name MAP) 
        vector=($map_ave.x $map_ave.y $map_ave.z)
    end
end loop nloop1
