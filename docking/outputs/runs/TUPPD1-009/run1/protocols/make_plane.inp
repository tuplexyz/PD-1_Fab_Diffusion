! make_tensor_para.inp
!    Create a tensor file and topology for Pseudo Contact Shifts
!
! ***********************************************************************
! * Copyright 2003-2018 AleSHAdre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

topology
   @@../toppar/shape.top
end

evaluate ($xdim = 250)
evaluate ($ydim = 250)
evaluate ($spacing = 12.5)
evaluate ($numxd = $xdim/$spacing)
evaluate ($numyd = $ydim/$spacing)

evaluate ($numres = $xdim*$xdim/$spacing**2)

segment
  name="SHA"
  chain 
      sequence 
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
        "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA" "SHA"
      end
    end
end


do (z = 0) (all)

evaluate ($count1 = 0)
evaluate ($nresid = 0)
evaluate ($xstart = 0)
while ($count1 < $numxd) loop shape1
  evaluate ($count1 = $count1 + 1)
  evaluate ($count2 = 0)
  evaluate ($ystart = 0)
  while ($count2 < $numyd) loop shape2
    evaluate ($count2 = $count2 + 1)
    evaluate ($nresid = $nresid + 1)
    do (x = $xstart) (resid $nresid)
    do (y = $ystart) (resid $nresid)
    evaluate ($ystart = $ystart + $spacing)
  end loop shape2
  evaluate ($xstart = $xstart + $spacing)

end loop shape1 

write structure output=plane.psf end
write coor output=plane.pdb end

stop
